#pragma once

#include <defines.h>

/*
    Test #1 Память 2047Mb, количество случайных операций 100000, время 9 сек (для моего PC).
            Перед уничтожением зафиксирован размер списка в 64 элемента (в памяти 1536B).
    Test #2 Память 2047Mb, количество случайных операций 1000000, время 78 сек (для моего PC).
            Перед уничтожением зафиксирован размер списка в 128 элемента (в памяти 3072B).

    NOTE: Если память в 2047Mb адресовать на размер адреса (т.е. sizeof(void*)), то количество
          элементов листа достигнет значения 268304384, и если учесть что размер структуры
          хранящий один элемент составляет 24B, то для хранения списка максимально может
          потребоваться 6141Mb, который на секундочку адресует пространство в 2047Mb. Здесь
          размер структуры freelist не учитывается (т.е. sizeof(freelist)), по сравнению с тем
          что выше это смех и слезы =).

    CONCLUSION: Нужно стараться избегать использования freelist без острой необходимости!
*/

// TODO: Добавить предупреждение, когда размер списка превышает разумный предел!
// TODO: Сделать настраиваемыми!
#define NODE_START 128
#define NODE_RESIZE_FACTOR 2

// @brief Контекст списка свободной памяти.
typedef struct freelist freelist;

/*
    @brief Создает список свободной памяти или получает требования к списку.
    NOTE: Вызывается дважды, первый для получения требований и второй для создания списка.
    @param total_size Размер памяти в байтах, который должен отслеживать список.
    @param memory_requirement Указатель для хранения требований к памяти.
    @param memory Указатель выделенную память, или null для получения требований.
    @return Указатель на экземпляр списка свободной памяти или null при получении
            требований или ошибках.
*/
KAPI freelist* freelist_create(u64 total_size, u64* memory_requirement, void* memory);

/*
    @brief Уничтожает список свободной памяти.
    NOTE: После использования в этой функции, указатель на список нужно обнулить самостоятельно.
    @param list Указатель на экземпляр списка свободной памяти.
*/
KAPI void freelist_destroy(freelist* list);

/*
    @brief Пытается найти свободный блок памяти заданного размера.
    @param list Указатель на экземпляр списка свободной памяти.
    @param size Запрашиваемый размер памяти в байтах для выделения.
    @param out_offset Указатель для хранения смещения выделенной памяти.
    @return True если блок памяти был найден и выделен или false в противном случае.
*/
KAPI bool freelist_allocate_block(freelist* list, u64 size, u64* out_offset);

/*
    @brief Пытается освободить блок памяти по указанному смещению и размеру.
    NOTE: Может потерпеть неудачу, если переданы неверные данные.
    @param list Указатель на экземпляр списка свободной памяти.
    @param size Размер памяти в байтах, который необходимо совободить.
    @param offset Смещение, по которому необходимо освободить память.
    @return True если память освобождена успешно или false если не удалось.
*/
KAPI bool freelist_free_block(freelist* list, u64 size, u64 offset);

/*
    @brief Пытается изменить размер списка свободной памяти до указанного размера.
    @param list Указатель на экземпляр списка свободной памяти.
    @param new_size Новый размер памяти в байтах, должен быть больше предыдущего.
    @return True если изменить размер удалось или false в противном случае.
*/
KAPI bool freelist_resize(freelist* list, u64 new_size);

/*
    @brief Возвращает все занятые блоки в список свободой памяти.
    NOTE: Все ранее полученые offset значения становяться недействительными.
    @param list Указатель на экземпляр списка свободной памяти.
*/
KAPI void freelist_clear(freelist* list);

/*
    @brief Возвращает объем доступной памяти в байтах из списка свободной памяти.
    NOTE: Полученное значание это сумма всех размеров свободных блоков памяти.
    @param list Указатель на экземпляр списка свободной памяти.
    @return Объем доступной памяти в байтах или 0 при ошибках.
*/
KAPI u64 freelist_free_space(freelist* list);

/*
    @brief Возвращает количество блоков свободной памяти в листе.
    @param list Указатель на экземпляр списка свободной памяти.
    @return Количество блоков свободной памяти в данный момент или 0 при ошибках.
*/
KAPI u64 freelist_block_count(freelist* list);

/*
    @brief Возращает максимально возможное количество блоков свободной памяти
           которое может хранить лист в данный момент.
    NOTE: Лист блоков свободной памяти динамически расширяется по мене необходимости.
    @param list Указатель на экземпляр списка свободной памяти.
    @return Максимально возможное количество блоков свободной памяти в данный момент
            или 0 при ошибках.
*/
KAPI u64 freelist_block_capacity(freelist* list);
