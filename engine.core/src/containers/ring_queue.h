#pragma once

#include <defines.h>

// @brief Представляет контекст кольцевой очереди.
typedef struct ring_queue ring_queue;

/*
    @brief Создает новую кольцевую очередь, используя размер элемента и очереди.
    @param stride Размер элемента очереди в байтах.
    @param capacity Количество элементов очереди (максимальное, т.к. после создания размер постоянный).
    @param memory_requirement Указатель на переменную для сохранения количество требуемой памяти для
           сохранения контекста очереди, укажи 'null' для использования распределителя по умолчанию.
    @param memory Указатель на выделенную память для сохранения контекста, укажи 'null' для запроса
           требований к памяти (если memory_requirement != null), а так же если используется распределитель
           по умолчанию.
    @param out_queue Указатель на указатель для сохранения адреса на контекста очереди.
    @return True создание кольцевой очереди успешно выполено, false если не удалось.
*/
KAPI bool ring_queue_create(u32 stride, u32 capacity, u64* memory_requirement, void* memory, ring_queue** out_queue);

/*
    @brief Уничтожает предоставленную кольцевую очередь, а так же освободит память, если была выделена
           распределителем по умолчанию.
    @param queue Указатель на контекст кольцевой очереди.
*/
KAPI void ring_queue_destroy(ring_queue* queue);

/*
    @brief Добавляет значение в предоставленную кольцевую очередь, если доступно место.
    @param queue Указатель на контекст кольцевой очереди.
    @param value Значение которое необходимо добавить в очередь.
    @return True значение успешно добавлено, false если не удалось.
*/
KAPI bool ring_queue_enqueue(ring_queue* queue, void* value);

/*
    @brief Пытается получить следующее значение из предоставленной кольцевой очереди.
    @param queue Указатель на контекст кольцевой очереди.
    @param out_value Указатель на память для сохраниения значения полученное из очереди.
    @return True значение получено успешно, false если не удалось.
*/
KAPI bool ring_queue_dequeue(ring_queue* queue, void* out_value);

/*
    @brief Пытается получить следующее значение из предоставленной кольцевой очереди, но не удаляет.
    @param queue Указатель на контекст кольцевой очереди.
    @param out_value Указатель на память для сохраниения значения полученное из очереди (ОПЦИОНАЛЬНО).
    @return True значение получено успешно, false если не удалось.
*/
KAPI bool ring_queue_peek(const ring_queue* queue, void* out_value);

/*
    @brief Получает количество элементов в очереди.
    @return Количество элементов в очереди.
*/
KAPI u32 ring_queue_length(const ring_queue* queue);
