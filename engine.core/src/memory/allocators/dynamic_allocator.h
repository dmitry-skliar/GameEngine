#pragma once

#include <defines.h>

/*
    @brief Минимальный размер блока свободной памяти в байтах, не относится к запрашиваемой памяти.
    @note  Используется при разделении блока на два разных блока, позволяет уменьшить фрагментацию памяти
           путем увеличения этого значения, но при этом памяти расходуется больше.
*/
#define MIN_SPLIT_SIZE 16

// TODO: Можно добавить раздельные списки для разных размеров (например, small/medium/large)? Или сделать отдельный распределитель?

// TODO: Для наблюдения за фрагментацией памяти, реализовать функцию, которая выдеат структуру с информацией по памяти:
//       - Весь размер памяти
//       - Смещения свободных участков относительно нуля и размер каждого.

// TODO: Рассмотреть стратегию, при которой блоки разделяются только если остаток превышает определенный порог
//       (например, 128 байт), чтобы уменьшить фрагментацию.

// @brief Контекст экземпляра динамического распределителя памяти.
typedef struct dynamic_allocator dynamic_allocator;

/*
    @brief Создает динамический распределитель памяти. Неодбходимо вызывать дважды: первый раз
           для получения требований к памяти, второй раз для получения экземпляра динамического
           распределителя памяти.
    @note  Слудеет учитывать при выборе значения размера памяти, т.к. эта память будет
           использоваться и для хранения контекста распределителя памяти, а так же для
           хранения служебной информации блоков памяти (свободных и используемых).
    @param total_size Размер памяти в байтах которым будет распоряжаться распределитель памяти.
    @param memory_requirement Указатель на переменную для сохранения требований к памяти в байтах.
    @param memory Указатель на требуемую память. Для получения требований указать 'null'.
    @return В случае успеха указатель на экземпляр распределителя, в противном случае 'null' с выводом сообщения в логи.
*/
KAPI dynamic_allocator* dynamic_allocator_create(ptr total_size, ptr* memory_requirement, void* memory);

/*
    @brief Уничтожает динамический распределитель памяти.
    @note  При уничтожении, выполняется проверка на утечку памяти с выводом сообщения об утечке.
    @param allocator Указатель на контекст экземпляра динамического распределителя памяти.
*/
KAPI void dynamic_allocator_destroy(dynamic_allocator* allocator);

/*
    @brief Пытается выделить запрашиваемое количество памяти с заданным выравниванием.
    @note В процессе выделения, размер памяти выделяемого блока может быть увеличен, если
          при разделении блока памяти, размер оставшегося блока свободной памяти будет
          недостаточно для хранения служебной информации о нем.
    @param allocator Указатель на контекст экземпляра динамического распределителя памяти.
    @param size Размер запрашиваемой памяти в байтах.
    @param alignment Кратность выравнивания блока памяти. Должна быть степенью двойки.
    @return В случае успеха указатель на выделенный блока памяти, в противном случае null c выводом сообщения в логи.
*/
KAPI void* dynamic_allocator_allocate(dynamic_allocator* allocator, ptr size, u16 alignment);

/*
    @brief Птается освободить предоставленный участок памяти.
    @param allocator Указатель на контекст экземпляра динамического распределителя памяти.
    @param block Указатель на блок памяти который необходимо освободить.
    @return True в случае успеха, в противном случае false с выводом сообщения в логи.
*/
KAPI bool dynamic_allocator_free(dynamic_allocator* allocator, void* block);

/*
    @brief Пытается получить количество памяти в распоряжении динамического распределителя памяти.
    @param allocator Указатель на контекст экземпляра динамического распределителя памяти.
    @return Количество общей памяти в байтах.
*/
KAPI ptr dynamic_allocator_get_total_space(dynamic_allocator* allocator);

/*
    @brief Пытается получить количество свободной памяти доступной динамическому распределителю памяти.
    @param allocator Указатель на контекст экземпляра динамического распределителя памяти.
    @return Количество свободной памяти в байтах.
*/
KAPI ptr dynamic_allocator_get_free_space(dynamic_allocator* allocator);

/*
    @brief Пытается получить количество блоков свободной памяти доступной динамическому распределителю памяти.
    @param allocator Указатель на контекст экземпляра динамического распределителя памяти.
    @return Количество блоков свободной памяти.
*/
KAPI ptr dynamic_allocator_get_free_block_count(dynamic_allocator* allocator);

/*
    @brief Пытается получить размер блока памяти.
    @note Следует помнить, что при выделении блока, его размер может быть увеличен.
    @param block Указатель на блок памяти размер которого необходимо получить.
    @param out_size Указатель на переменную для сохранения размера блока памяти в байтах.
    @return True в случае успеха, в противном случае false с выводом сообщения в логи.
*/
KAPI bool dynamic_allocator_block_get_size(void* block, ptr* out_size);

/*
    @brief Пытается получить кратность выравнивания блока памяти.
    @param block Указатель на блок памяти кратность выравнивания которого необходимо получить.
    @param out_alignment Указатель на переменную для сохранения кратности выравнивания блока памяти.
    @return True в случае успеха, в противном случае false с выводом сообщения в логи.
*/
KAPI bool dynamic_allocator_block_get_alignment(void* block, u16* out_alignment);
